import { toast } from "react-toastify";
import { create } from "zustand";

interface Task {
  id: number;
  name: string;
  quantity: number;
  payment: number;
}

type State = {
  money: number;
  day: number;
  products: Array<{
    id: number;
    name: string;
    quantity: number;
    idCity: number;
  }>;
  cities: Array<{
    id: number;
    name: string;
  }>;
  countBuyingProducts: number;
  countCompletedTask: number;
  alertShown: boolean;
  tasks: Task[];
  countTasks: number;
};

type Action = {
  buyProduct: (id: number, count: number, price: number) => void;
  sellProduct: (id: number, count: number, payment: number) => void;
  countProduct: (id: number) => number | undefined;
  increaseDay: () => void;
  generateTasks: () => void;
  removeTask: (index: number) => void;
  gameOver: () => void;
};

const useStore = create<State & Action>((set, get) => ({
  countTasks: 3,
  tasks: [],
  countBuyingProducts: 0,
  countCompletedTask: 0,
  alertShown: true,
  money: 49500,
  day: 1,
  products: [
    { id: 1, name: "üß± –ö–∞–º–µ–Ω—å", quantity: 20, idCity: 1 },
    { id: 2, name: "üå≤ –î–µ—Ä–µ–≤–æ", quantity: 20, idCity: 1 },
    { id: 3, name: "üç∫ –ü–∏–≤–æ", quantity: 0, idCity: 1 },
    { id: 4, name: "üî© –°—Ç–∞–ª—å", quantity: 0, idCity: 2 },
    { id: 5, name: "üßΩ –†–µ–∑–∏–Ω–∞", quantity: 0, idCity: 2 },
    { id: 6, name: "‚öôÔ∏è –ú–µ—Ç–∞–ª", quantity: 0, idCity: 2 },
    { id: 7, name: "üß± –ì—Ä–∞–Ω–∏—Ç", quantity: 0, idCity: 3 },
    { id: 8, name: "‚ôªÔ∏è –ü–ª–∞—Å—Ç–∏–∫", quantity: 0, idCity: 3 },
    { id: 9, name: "üåø –•–ª–æ–ø–æ–∫", quantity: 0, idCity: 3 },
    { id: 10, name: "üçª –≠–ª—å", quantity: 0, idCity: 4 },
    { id: 11, name: "üç∂ –ú–∞–π–±–æ–∫", quantity: 0, idCity: 4 },
    { id: 12, name: "üç∑ –ü–æ—Ä—Ç–µ—Ä", quantity: 0, idCity: 4 },
  ],
  cities: [
    { id: 1, name: "üèûÔ∏è –ö–∞–º–Ω–µ–≥—Ä–∞–¥" },
    { id: 2, name: "üè≠ –ò–Ω–¥—É—Å—Ç—Ä–∏–æ–Ω" },
    { id: 3, name: "üèïÔ∏è –¢–µ–∫—Å–æ–ø–æ–ª–∏—Å" },
    { id: 4, name: "üç∫ –ë—Ä—é–±—É—Ä–≥" },
  ],
  increaseDay: () => set((state) => ({ day: state.day + 1 })),
  buyProduct: (id: number, count: number, price: number) =>
    set((state) => {
      const totalCost = count * price;

      if (state.money >= totalCost) {
        const newProducts = state.products.map((product) =>
          product.id === id
            ? { ...product, quantity: product.quantity + count }
            : product
        );

        toast("–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞");

        return {
          products: newProducts,
          money: state.money - totalCost,
          countBuyingProducts: state.countBuyingProducts + 1,
        };
      } else {
        toast("–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥");
        return {};
      }
    }),
  sellProduct: (id: number, count: number, payment: number) =>
    set((state) => {
      const newProducts = state.products.map((product) =>
        product.id === id && product.quantity >= count
          ? { ...product, quantity: product.quantity - count }
          : product
      );

      return {
        products: newProducts,
        money: state.money + payment,
        countCompletedTask: state.countCompletedTask + 1,
      };
    }),
  countProduct: (id: number) => {
    const countProduct = get().products.find((product) => product.id === id);

    return countProduct?.quantity;
  },

  generateTasks: () => {
    const newTasks: Task[] = [];

    if (get().products.length === 0) return;

    for (let i = 0; i < get().countTasks; i++) {
      const randomIndex = Math.floor(Math.random() * get().products.length);
      const product = get().products[randomIndex];
      const quantity = Math.floor(Math.random() * 5) + 1;
      newTasks.push({
        id: product.id,
        name: product.name,
        quantity,
        payment: quantity * 30,
      });
    }

    set({ tasks: newTasks });
  },

  removeTask: (index: number) =>
    set((state) => ({
      tasks: state.tasks.filter((_, i) => i !== index),
    })),

  gameOver: () => {
    if (get().money >= 50000 && get().alertShown) {
      console.log("–ê–ª–µ—Ä—Ç –µ–±–∞–Ω–∞");

      alert(
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø—Ä–æ—à–µ–ª –∏–≥—Ä—É!\n` +
          `üìÖ –ö–æ–ª-–≤–æ –¥–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ: ${get().day}\n` +
          `üõí –ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫ —Å–¥–µ–ª–∞–Ω–æ: ${get().countBuyingProducts}\n` +
          `‚úÖ –ö–æ–ª-–≤–æ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${get().countCompletedTask}`
      );
      set({ alertShown: false });
    }
  },
}));

export default useStore;
